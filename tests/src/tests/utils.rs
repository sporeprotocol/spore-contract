use ckb_testtool::ckb_types::prelude::{Builder, Entity};
use spore_types::generated::spore;
use spore_utils::{compatible_load_cluster_data, MIME};

#[test]
fn test_mime_basic() {
    assert!(MIME::str_parse("image/png").is_ok());
    assert!(MIME::str_parse("image/png;immortal=true").is_ok());
    assert!(MIME::str_parse("image/").is_err());
    assert!(MIME::str_parse("image/;").is_err());
    assert!(MIME::str_parse("/;").is_err());
    assert!(MIME::str_parse(";").is_err());
    assert!(MIME::str_parse("").is_err());

    let content_type = "image/png;immortal=true;mutant[]=c219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd,9c87faf08de5c15c727d5350399115431bf4f0226fbc4abd400e63492faac3d2";
    let mime = MIME::str_parse(content_type)
        .map_err(|err| format!("mutant str_parse: {}", err as u8))
        .unwrap();
    let expected_value = b"c219351b150b900e50a7039f1e448b844110927e5fd9bd30425806cb8ddff1fd,9c87faf08de5c15c727d5350399115431bf4f0226fbc4abd400e63492faac3d2";
    let value_range = mime
        .get_param(content_type.as_bytes(), "mutant[]")
        .map_err(|err| format!("mutant get_param: {}", err as u8))
        .unwrap()
        .expect("empty range");
    assert!(content_type.as_bytes()[value_range] == expected_value[..]);

    let expected_value = b"true";
    let value_range = mime
        .get_param(content_type.as_bytes(), "immortal")
        .map_err(|err| format!("mutant get_param: {}", err as u8))
        .unwrap()
        .expect("empty range");
    assert!(content_type.as_bytes()[value_range] == expected_value[..]);
}

#[test]
fn test_compatible_load_cluster_data() {
    // test ClusterDataV1 -> ClusterDataV2
    let cluster_data_v1 = spore::ClusterData::new_builder()
        .name("Test Cluster Name".as_bytes().into())
        .description("Test Cluster Description".as_bytes().into())
        .build();
    let raw_cluster_data = cluster_data_v1.as_slice();
    let cluster_data_v2 = compatible_load_cluster_data(raw_cluster_data)
        .map_err(|_| "compatible_load_cluster_data error")
        .expect("test ClusterDataV1 -> ClusterDataV2");
    assert_eq!(
        cluster_data_v2.name().as_slice(),
        cluster_data_v1.name().as_slice()
    );
    assert_eq!(
        cluster_data_v2.description().as_slice(),
        cluster_data_v1.description().as_slice()
    );
    assert!(cluster_data_v2.mutant_id().is_none());

    // test ClusterDataV2 -> ClusterDataV2
    let cluster_data_v2_with_mutant_id = cluster_data_v2
        .as_builder()
        .mutant_id("mock mutant_id".as_bytes().into())
        .build();
    let raw_cluster_data = cluster_data_v2_with_mutant_id.as_slice();
    let cluster_data_v1 = spore::ClusterData::from_compatible_slice(raw_cluster_data)
        .map_err(|_| "spore::ClusterData::from_compatible_slice error")
        .expect("test old format -> new format");
    assert!(cluster_data_v1.has_extra_fields());
    assert_eq!(cluster_data_v1.field_count(), 3);
    assert_eq!(cluster_data_v1.count_extra_fields(), 1);
    let cluster_data_v2 = compatible_load_cluster_data(raw_cluster_data)
        .map_err(|_| "compatible_load_cluster_data error")
        .expect("test ClusterDataV2 -> ClusterDataV2");
    assert!(cluster_data_v2.mutant_id().is_some());
}

#[test]
fn test_decode_cluster_data() {
    let cluster_data = "";
    let cluster_data_bytes = hex::decode(cluster_data).unwrap();
    let cluster = spore::ClusterDataV2::from_compatible_slice(&cluster_data_bytes)
        .map_err(|_| "ClusterDataV2::from_compatible_slice error")
        .expect("decode cluster data");
    let description = cluster.description();
    let hexed = String::from_utf8(description.raw_data().to_vec()).unwrap();
    let expected = "{\"description\":\"Nervape, multi-chain composable digital objects built on Bitcoin.\",\"dob\":{\"ver\":0,\"decoder\":{\"type\":\"code_hash\",\"hash\":\"0xb82abd59ade361a014f0abb692f71b0feb880693c3ccb95b9137b73551d872ce\"},\"pattern\":\"830900004400000087000000370500004206000085060000c2060000050700004807000089070000c6070000060800004408000081080000c00800000209000043090000430000000c0000001900000009000000707265762e747970652a00000008000000220000000c0000000d0000000100000000110000000800000005000000696d616765b00400000c0000001700000007000000707265762e62679904000008000000910400000c0000000d0000000100000000800400003c0000008a000000d80000002601000074010000c2010000100200005e020000ac020000fa0200004803000096030000e4030000320400004a00000062746366733a2f2f6232663435363066313736373964336533666361363632303961633432356336363064323861323532656637323434346333333235633665623033363433393369304a00000062746366733a2f2f3935353235656238326639613134633739323934373639343932653766396230323539313164393366356661363662383139653462643538636463643233663169304a00000062746366733a2f2f6562333931306233653332613565643934363062643064373531363863303162613162386630306363306661663833653464386236376234386561373936373669304a00000062746366733a2f2f6430343961396163336161643834333535663761353531373633633832383264656530653639616230356332623737633236393962623266623635633563313669304a00000062746366733a2f2f6632333937623335656132643035303435386263376563393864636433643963333032316161396434346239636131636234343637336334656237633865666169304a00000062746366733a2f2f6663633064386633393537303432633762323065386566626137623136383834616235376333326665666132363531623034356261353036613132303136303869304a00000062746366733a2f2f6230313735356131343164643635656532613062336264346161363461316533653939346133633832623432323731646335643730316334386336376636643569304a00000062746366733a2f2f3534356239346362316563663231373562383163363031333436653461376530353134396361666336663233353333306339393138653335663932306531303969304a00000062746366733a2f2f3538393530303465393563386134623830663035663533313464333130303637613730333133343531356438326566666332656336656261306464613366633969304a00000062746366733a2f2f6334326637613436323838306534653366396234313062616235383361616437303065333661353339616136363731623134306132313736656232663034616369304a00000062746366733a2f2f3634303539663835346663396539303464306264663433626137303430613938386461386539373363306433623536336163666661393736356362366362663369304a00000062746366733a2f2f3965396166626161646462623466326330313233376264643234303531333137393333383964313831336635663161303264393737313331306162333063373069304a00000062746366733a2f2f3131623633303365623764383837643761646534353961633237393539373534636435356639663965353033343563656438653165386634376634353831666169304a00000062746366733a2f2f6631646365303962626236313936316233633631656662666132363361333835313163663839646264656564323036663665636330303161353263316662303169300b0100000c0000001c0000000c000000707265762e6267636f6c6f72ef00000008000000e70000000c0000000d0000000100000000d60000003c00000047000000520000005d00000068000000730000007e00000089000000940000009f000000aa000000b5000000c0000000cb00000007000000234646453345420700000023464642444643070000002344344330464607000000234146453746390700000023414246344430070000002345384541424507000000234643463841430700000023454142433842070000002346464438383007000000234646453243370700000023464642353744070000002346464144414207000000234530453145320700000023413341374141430000000c0000001a0000000a0000004261636b67726f756e642900000008000000210000000c0000000d00000001030000000000000000000000ff000000000000003d0000000c0000001400000004000000537569742900000008000000210000000c0000000d00000001030000000000000000000000ff00000000000000430000000c0000001a0000000a000000557070657220626f64792900000008000000210000000c0000000d00000001030000000000000000000000ff00000000000000430000000c0000001a0000000a0000004c6f77657220626f64792900000008000000210000000c0000000d00000001030000000000000000000000ff00000000000000410000000c000000180000000800000048656164776561722900000008000000210000000c0000000d00000001030000000000000000000000ff000000000000003d0000000c00000014000000040000004d61736b2900000008000000210000000c0000000d00000001030000000000000000000000ff00000000000000400000000c0000001700000007000000457965776561722900000008000000210000000c0000000d00000001030000000000000000000000ff000000000000003e0000000c00000015000000050000004d6f7574682900000008000000210000000c0000000d00000001030000000000000000000000ff000000000000003d0000000c0000001400000004000000456172732900000008000000210000000c0000000d00000001030000000000000000000000ff000000000000003f0000000c0000001600000006000000546174746f6f2900000008000000210000000c0000000d00000001030000000000000000000000ff00000000000000420000000c00000019000000090000004163636573736f72792900000008000000210000000c0000000d00000001030000000000000000000000ff00000000000000410000000c000000180000000800000048616e6468656c642900000008000000210000000c0000000d00000001030000000000000000000000ff00000000000000400000000c00000017000000070000005370656369616c2900000008000000210000000c0000000d00000001030000000000000000000000ff00000000000000\",\"dna_bytes\":16}}";
    assert!(hexed == expected);
}
